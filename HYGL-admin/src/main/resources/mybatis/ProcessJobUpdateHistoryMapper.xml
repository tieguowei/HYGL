<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.resale.background.mapper.ProcessJobUpdateHistoryMapper">
  <resultMap id="BaseResultMap" type="com.resale.background.pojo.ProcessJobUpdateHistory">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="process_id" jdbcType="INTEGER" property="processId" />
    <result column="job_basic_id" jdbcType="INTEGER" property="jobBasicId" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_content" jdbcType="VARCHAR" property="updateContent" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="operator" jdbcType="VARCHAR" property="operator" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, process_id, job_basic_id, update_time, update_content, status, operator
  </sql>
  <select id="selectByExample" parameterType="com.resale.background.pojo.ProcessJobUpdateHistoryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_process_job_update_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_process_job_update_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_process_job_update_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.resale.background.pojo.ProcessJobUpdateHistoryExample">
    delete from t_process_job_update_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.resale.background.pojo.ProcessJobUpdateHistory">
    insert into t_process_job_update_history (id, process_id, job_basic_id, 
      update_time, update_content, status, 
      operator)
    values (#{id,jdbcType=INTEGER}, #{processId,jdbcType=INTEGER}, #{jobBasicId,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateContent,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, 
      #{operator,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.resale.background.pojo.ProcessJobUpdateHistory">
    insert into t_process_job_update_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="processId != null">
        process_id,
      </if>
      <if test="jobBasicId != null">
        job_basic_id,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateContent != null">
        update_content,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="operator != null">
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="processId != null">
        #{processId,jdbcType=INTEGER},
      </if>
      <if test="jobBasicId != null">
        #{jobBasicId,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateContent != null">
        #{updateContent,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.resale.background.pojo.ProcessJobUpdateHistoryExample" resultType="java.lang.Long">
    select count(*) from t_process_job_update_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_process_job_update_history
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.processId != null">
        process_id = #{record.processId,jdbcType=INTEGER},
      </if>
      <if test="record.jobBasicId != null">
        job_basic_id = #{record.jobBasicId,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateContent != null">
        update_content = #{record.updateContent,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_process_job_update_history
    set id = #{record.id,jdbcType=INTEGER},
      process_id = #{record.processId,jdbcType=INTEGER},
      job_basic_id = #{record.jobBasicId,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_content = #{record.updateContent,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=CHAR},
      operator = #{record.operator,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.resale.background.pojo.ProcessJobUpdateHistory">
    update t_process_job_update_history
    <set>
      <if test="processId != null">
        process_id = #{processId,jdbcType=INTEGER},
      </if>
      <if test="jobBasicId != null">
        job_basic_id = #{jobBasicId,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateContent != null">
        update_content = #{updateContent,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.resale.background.pojo.ProcessJobUpdateHistory">
    update t_process_job_update_history
    set process_id = #{processId,jdbcType=INTEGER},
      job_basic_id = #{jobBasicId,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_content = #{updateContent,jdbcType=VARCHAR},
      status = #{status,jdbcType=CHAR},
      operator = #{operator,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="findAllRetMapByPage" resultType="hashmap" parameterType="hashmap">
  	SELECT
			id,
			process_id,
			job_basic_id,
	  		DATE_FORMAT(update_time,'%Y-%m-%d %H:%i:%s') update_time,
			update_content,
			operator
	FROM
		t_process_job_update_history
	<where>
		<if test="processId != null">
      	 and process_id = #{processId,jdbcType=INTEGER}
      	</if>
      	<if test="jobBasicId != null">
       	 and job_basic_id = #{jobBasicId,jdbcType=INTEGER}
      	</if>
      	<if test="status != null">
       	 and status = #{status,jdbcType=CHAR}
      </if>
	</where>
	order by update_time desc
	limit #{startIndex},#{pageSize}
  </select>
  
  
   <select id="findAllByPageCount" resultType="long" parameterType="hashmap">
  	SELECT
		 count(1)
	FROM
		t_process_job_update_history
	<where>
		<if test="processId != null">
      	 and process_id = #{processId,jdbcType=INTEGER}
      	</if>
      	<if test="jobBasicId != null">
       	 and job_basic_id = #{jobBasicId,jdbcType=INTEGER}
      	</if>
      	<if test="status != null">
       	 and status = #{status,jdbcType=CHAR}
      </if>
	</where>
  </select>
  
  <select id="findList" resultType="hashmap" parameterType="hashmap">
  	SELECT
		 <include refid="Base_Column_List" /> 
	FROM
		t_process_job_update_history
	<where>
		<if test="processId != null">
      	 and process_id = #{processId,jdbcType=INTEGER}
      	</if>
      	<if test="jobBasicId != null">
       	 and job_basic_id = #{jobBasicId,jdbcType=INTEGER}
      	</if>
	</where>
  </select>
</mapper>